#include "imports/stdlib.fc";
#include "imports/params.fc";

;; Operation codes
const int op::increment = 1;
const int op::withdraw = 2;
const int op::change_owner = 3;
const int op::transfer_notification = 0x7362d09c; ;; Jetton transfer notification

;; Error codes
const int error::insufficient_fee = 101;
const int error::not_authorized = 102;
const int error::invalid_jetton = 103;

;; Fee amount
const int INCREMENT_FEE = 10000000; ;; 0.01 TON
const int INCREMENT_FEE_JETTON = 2000000000; ;; 2 JETTON
const slice JETTON_MASTER_ADDRESS = "EQCsLX9gqd0p7aG9C847wastVwvGzGSj-5r4nJT1AIe37pd5";

;; Equality check
int equal_slice_bits(slice a, slice b) asm "SDEQ";

;; Storage format
;; strict value:(## 64) owner_address:MsgAddressInt jetton_balance:(## 64) = Storage;

(int, slice, int) load_data() inline {
    slice ds = get_data().begin_parse();
    if (ds.slice_empty?()) {  ;; First deploy check
        return (0, null(), 0);   ;; Default values
    }
    return (
        ds~load_uint(64),      ;; value
        ds~load_msg_addr(),     ;; owner_address
        ds~load_coins()       ;; jetton_balance
    );
}

() save_data(int value, slice owner_address, int jetton_balance) impure inline {
    set_data(
        begin_cell()
            .store_uint(value, 64)
            .store_slice(owner_address)
            .store_coins(jetton_balance)
        .end_cell()
    );
}

() check_owner(slice sender_address, slice owner_address) impure inline {
    throw_unless(error::not_authorized, equal_slice_bits(sender_address, owner_address));
}

() send_jettons(slice to_address, int amount, slice jetton_wallet_address) impure {
    var msg = begin_cell()
        .store_uint(0x18, 6)           ;; nobounce
        .store_slice(jetton_wallet_address)
        .store_coins(50000000)         ;; 0.05 TON for fees
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x0f8a7ea5, 32)     ;; transfer - düzeltildi: 0xf8a7ea5 -> 0x0f8a7ea5
        .store_uint(0, 64)             ;; query_id
        .store_slice(to_address)
        .store_coins(1)                ;; forward_ton_amount
        .store_uint(0, 1)              ;; forward payload in this slice, not separate cell
        .end_cell();
    send_raw_message(msg, 1);          ;; mode 1 - pay transfer fees separately
}

;; Internal message handling
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; Parse sender address
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    
    ;; Bounce check
    if (flags & 1) { return (); }

    ;; Empty message handling - Initial deployment
    if (in_msg_body.slice_empty?()) {
        save_data(0, sender_address, 0);
        return ();
    }

    ;; Load contract data
    (int value, slice owner_address, int jetton_balance) = load_data();
    

    int op = in_msg_body~load_uint(32);

    ;; Handle jetton transfer notification
    if (op == op::transfer_notification) {
        int query_id = in_msg_body~load_uint(64);
        int amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();

        jetton_balance += amount;
        value += 1;
    
        save_data(value, owner_address, jetton_balance);
        return ();
    }
    ;; Increment operation - anyone can do
    if (op == op::increment) {
        ;; Check if enough fee is attached
        throw_unless(error::insufficient_fee, msg_value >= INCREMENT_FEE);
        
        int inc_value = in_msg_body~load_uint(64);
        int old_value = value;  ;; eski değeri sakla
        value += inc_value;

        ~dump(op);           ;; operation code
        ~dump(inc_value);    ;; artış miktarı
        ~dump(old_value);    ;; eski değer
        ~dump(value);        ;; yeni değer

        save_data(value, owner_address, jetton_balance);
        return ();
    }

    ;; Withdraw operation - only owner
    if (op == op::withdraw) {
        check_owner(sender_address, owner_address);
        
        ;; Send all jettons to owner
        if (jetton_balance > 0) {
            send_jettons(owner_address, jetton_balance, JETTON_MASTER_ADDRESS);
            jetton_balance = 0;
        }
        
        ;; Reserve minimum balance and send remaining TON
        raw_reserve(10000000, 0);
        
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
            
        send_raw_message(msg, 128 + 16);
        
        save_data(value, owner_address, jetton_balance);
        return ();
    }

    ;; Change owner operation - only owner
    if (op == op::change_owner) {
        check_owner(sender_address, owner_address);
        slice new_owner = in_msg_body~load_msg_addr();
        force_chain(new_owner);
        save_data(value, new_owner, jetton_balance);
        return ();
    }

    ;; If no operation matched
    throw(0xffff);
}

;; Getter methods
(int, slice, int) get_contract_data() method_id {
    (int value, slice owner, int jetton_balance) = load_data();
    return (value, owner, jetton_balance);
}

int get_value() method_id {
    (int value, _, _) = load_data();
    return value;
}

slice get_owner() method_id {
    (_, slice owner, _) = load_data();
    return owner;
}

int get_jetton_balance() method_id {
    (_, _, int jetton_balance) = load_data();
    return jetton_balance;
}
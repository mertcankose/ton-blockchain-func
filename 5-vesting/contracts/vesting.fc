#include "imports/stdlib.fc";

;; Jetton Standard Operations (TEP-74)
const int op::transfer = 0xf8a7ea5;
const int op::transfer_notification = 0x7362d09c;
const int op::excesses = 0xd53276db;

;; Vesting Operations
const int op::add_whitelist = 0x1234;
const int op::send_jettons = 0x7777;
const int op::report_status = 0x7FEE;
const int op::claim_unlocked = 0x8888;
const int op::create_vesting = 0x9999; ;; New operation for vesting creation

;; Common Errors
const int error::invalid_op = 0xffff;  ;; Invalid operation
const int error::access_denied = 0xffa0; ;; Access denied
const int error::invalid_amount = 0xffa2; ;; Invalid amount
const int error::not_owner = 0xffa5; ;; Not owner
const int error::insufficient_fee = 0xffa7; ;; Insufficient fee for vesting creation

;; Vesting Specific Errors
const int error::funds_locked = 0xff05; ;; Cannot send locked funds

;; Send Modes
const int send_mode::regular = 0; ;; Pay fee separately
const int send_mode::pay_gas_separately = 1; ;; Pay fees separately, ignore errors
const int send_mode::carry_remaining_gas = 64; ;; Carry all the remaining value of the inbound message
const int send_mode::carry_all_balance = 128; ;; Carry all the remaining balance of the contract
const int send_mode::destroy = 32; ;; Destroy the contract after the message is sent

;; Gas Constants
const int gas::jetton_transfer = 50000000; ;; Gas amount reserved for jetton transfer 0.05 TON

;; Vesting Constants
const int vesting::min_period = 60; ;; Minimum vesting period in seconds (1 minute)
const int vesting::max_period = 4294967295; ;; Maximum vesting period in seconds (~136 years)
const int vesting::min_amount = 1000000000; ;; Minimum vesting amount (1 JETTON in nanotons)

;; Royalty Constants
const int royalty::fee = 10000000; ;; Royalty fee in nanoTONs (0.01 TON)

;; address utils
const int ADDRESS_SIZE = 267; ;; 256 + 8

(int, int) unpack_address(slice address) inline {
    int wc = address~load_int(8);
    int address_hash = address~load_uint(256);
    return (wc, address_hash);
}

slice pack_address(slice address) inline {
    (int wc, int address_hash) = parse_std_addr(address);
    return begin_cell().store_int(wc, 8).store_uint(address_hash, 256).end_cell().begin_parse();
}

;; Helper to compare two addresses
int equal_slices(slice a, slice b) {
    return a.slice_hash() == b.slice_hash();
}

;; Updated Storage TL-B scheme 
;; storage#_ vesting_total_amount:Coins vesting_start_time:uint32 vesting_total_duration:uint32
;;          unlock_period:uint32 cliff_duration:uint32 vesting_sender_address:MsgAddress
;;          owner_address:MsgAddress seqno:uint32
;;          jettons_ref:^(jetton_master_address:MsgAddress)
;;          whitelist:(HashmapE 267 True)
;;          claimed_ref:^(claimed_amount:Coins)
;;          platform_owner:MsgAddress = Storage;

;; Load data - Updated to include platform owner address
(int, int, int, int, int, slice, slice, int, slice, cell, int, slice) load_data() inline {
    var ds = get_data().begin_parse();
    if (ds.slice_empty?()) {
        return (0, 0, 0, 0, 0, null(), null(), 0, null(), new_dict(), 0, null());
    }

    ;; Load main cell data
    int vesting_total_amount = ds~load_coins();
    int vesting_start_time = ds~load_uint(32);
    int vesting_total_duration = ds~load_uint(32);
    int unlock_period = ds~load_uint(32);
    int cliff_duration = ds~load_uint(32);
    slice vesting_sender_address = ds~load_msg_addr();
    slice owner_address = ds~load_msg_addr();
    int seqno = ds~load_uint(32);
    
    ;; Load reference cell with jetton addresses
    cell jettons_ref = ds~load_ref();
    slice jettons_slice = jettons_ref.begin_parse();
    slice jetton_master_address = jettons_slice~load_msg_addr();
    
    ;; Load whitelist
    cell whitelist = ds.slice_refs() ? ds~load_dict() : new_dict();
    
    ;; Load claimed amount from reference if exists
    int claimed_amount = 0;
    if (ds.slice_refs() >= 1) {
        cell claimed_ref = ds~load_ref();
        slice claimed_slice = claimed_ref.begin_parse();
        claimed_amount = claimed_slice~load_coins();
    }
    
    ;; Load platform owner address from reference if exists
    slice platform_owner = null();
    if (ds.slice_refs() >= 1) {
        cell platform_ref = ds~load_ref();
        slice platform_slice = platform_ref.begin_parse();
        platform_owner = platform_slice~load_msg_addr();
    }

    return (
        vesting_total_amount,
        vesting_start_time,
        vesting_total_duration,
        unlock_period,
        cliff_duration,
        vesting_sender_address,
        owner_address,
        seqno,
        jetton_master_address,
        whitelist,
        claimed_amount,
        platform_owner
    );
}

;; Save data - Updated to include platform owner address
() save_data(int vesting_total_amount, int vesting_start_time, int vesting_total_duration, 
    int unlock_period, int cliff_duration, slice vesting_sender_address, 
    slice owner_address, int seqno, 
    slice jetton_master_address, cell whitelist, int claimed_amount, slice platform_owner) impure inline {
    
    ;; Create reference cell with jetton addresses
    cell jettons_ref = begin_cell()
        .store_slice(jetton_master_address)
        .end_cell();
        
    ;; Create reference cell for claimed amount
    cell claimed_ref = begin_cell()
        .store_coins(claimed_amount)
        .end_cell();
        
    ;; Create reference cell for platform owner
    cell platform_ref = begin_cell()
        .store_slice(platform_owner)
        .end_cell();
    
    ;; Store main data with references
    set_data(
        begin_cell()
        .store_coins(vesting_total_amount)
        .store_uint(vesting_start_time, 32)
        .store_uint(vesting_total_duration, 32)
        .store_uint(unlock_period, 32)
        .store_uint(cliff_duration, 32)
        .store_slice(vesting_sender_address)
        .store_slice(owner_address)
        .store_uint(seqno, 32)
        .store_ref(jettons_ref)
        .store_dict(whitelist)
        .store_ref(claimed_ref)
        .store_ref(platform_ref)
        .end_cell()
    );
}

;; Rest of the helper functions (calculate_unlocked_amount, calculate_locked_amount, etc.) remain the same...

;; Entry point for handling messages
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; Accept TON transfers (needed for gas)
        return ();
    }
  
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
  
    if (flags & 1) {
        ;; Ignore bounced messages
        return ();
    }
  
    slice sender_addr = cs~load_msg_addr();
  
    ;; Load contract data
    var (vesting_total_amount, vesting_start_time, vesting_total_duration, 
        unlock_period, cliff_duration, vesting_sender_address, 
        owner_address, seqno, 
        jetton_master_address, whitelist, claimed_amount, platform_owner) = load_data();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    ;; New operation: create_vesting
    if (op == op::create_vesting) {
        ;; Check if royalty fee is included
        throw_unless(error::insufficient_fee, msg_value >= royalty::fee);
        
        ;; Parse vesting parameters from message
        int start_time = in_msg_body~load_uint(32);
        int total_duration = in_msg_body~load_uint(32);
        int unlock_period = in_msg_body~load_uint(32);
        int cliff_duration = in_msg_body~load_uint(32);
        slice jetton_master = in_msg_body~load_msg_addr();
        
        ;; Validate parameters
        ;; (Add parameter validation using validate_vesting_params)
        
        ;; Send royalty fee to platform owner
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(platform_owner)
            .store_coins(royalty::fee)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32) ;; No op
            .store_uint(query_id, 64)
            .store_slice("Royalty fee for vesting contract creation");
            
        send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);
        
        ;; Initialize vesting contract with the provided parameters
        save_data(
            0, ;; No tokens yet
            start_time,
            total_duration,
            unlock_period,
            cliff_duration,
            sender_addr, ;; Set creator as vesting sender
            sender_addr, ;; Set creator as owner initially
            0, ;; Initial seqno
            jetton_master,
            new_dict(), ;; Empty whitelist
            0, ;; No claimed tokens
            platform_owner ;; Store platform owner for future royalties
        );
        
        return ();
    }

    ;; Handle transfer_notification operation
    if (op == op::transfer_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        
        ;; forward payload
        slice forward_payload = in_msg_body;
        
        var (vesting_total_amount, vesting_start_time, vesting_total_duration, 
            unlock_period, cliff_duration, vesting_sender_address, 
            owner_address, seqno, 
            jetton_master_address, whitelist, claimed_amount, platform_owner) = load_data();
        
        vesting_total_amount += jetton_amount;
        
        save_data(vesting_total_amount, vesting_start_time, vesting_total_duration, 
            unlock_period, cliff_duration, vesting_sender_address, 
            owner_address, seqno, 
            jetton_master_address, whitelist, claimed_amount, platform_owner);
        return ();
    }

    ;; Rest of the operations (add_whitelist, excesses, claim_unlocked, send_jettons) remain the same
    ;; but update the function calls to include the platform_owner parameter when loading/saving data
    
    ;; Unknown operation
    throw(error::invalid_op);
}

;; Get methods remain largely the same, but update to include platform_owner in load_data calls
;; Add a new method to retrieve platform owner address

;; Get platform owner address
slice get_platform_owner() method_id {
    var (_, _, _, _, _, _, _, _, _, _, _, platform_owner) = load_data();
    return platform_owner;
}

;; Get royalty fee amount
int get_royalty_fee() method_id {
    return royalty::fee;
}